{"version":3,"sources":["images/Pokemon_logo.png","component/ProgressBar.js","component/Card.js","component/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProgressBar","statName","width","className","style","Card","imgUrl","name","rank","stats","pokeType","bgColor","normal","grass","fire","water","fighting","flying","poison","ground","rock","bug","ghost","electric","psychic","ice","dragon","dark","steel","fairy","color","Object","keys","includes","backgroundColor","src","alt","map","item","base_stat","stat","Header","pokeStartId","App","useState","data","setData","poke","startId","setStartId","isLoading","setIsLoading","nextPage","previousPage","useEffect","a","i","axios","result","push","console","log","getData","key","id","sprites","other","front_default","types","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1b45878.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Pokemon_logo.b02d66ba.png\";","import React from 'react'\r\nimport \"./ProgressBar.css\"\r\n\r\nfunction ProgressBar({statName, width}) {\r\n    return (\r\n        <div className=\"bar\">\r\n            <p className=\"bar-name\">{statName}</p>\r\n            <div className=\"bar-wrap\">\r\n                <div className=\"points\" style={{width :`${width*100/150}%`}}>\r\n                    \r\n                </div>\r\n            </div>\r\n    <span >{width}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar\r\n","import React from 'react'\r\nimport './Card.css'\r\nimport ProgressBar from './ProgressBar'\r\n\r\nfunction Card({imgUrl, name, rank, stats, pokeType}) {\r\n\r\n    const bgColor = {\r\n        normal: \"#BDBDAF\",\r\n        grass : \"#7eb998\",\r\n        fire:\"#f09990\",\r\n        water: \"#8ab7e2\",\r\n        fighting: \"#cc8c7f\",\r\n        flying: \"#78A1FF\",\r\n        poison: \"#d183c8\",\r\n        ground: \" #f1db90\",\r\n        rock : \"#e4d699\",\r\n        bug: \"#d9e086\",\r\n        ghost: \"#9995e4\",\r\n        electric: \"#f1e48e\",\r\n        psychic: \"#e493bf\",\r\n        ice : \"#a2dee7\",\r\n        dragon: \"#9c8fe5\",\r\n        dark : \"#d8a992\",\r\n        steel: \"#a7a3d8\",\r\n        fairy: \"#ebacf0\"\r\n    }\r\n// let bg = \"\";\r\nlet color = \"#000\";\r\nconst keys = Object.keys(bgColor);\r\nif(keys.includes(pokeType)) {\r\n    color = bgColor[pokeType];\r\n}\r\n\r\n\r\n    // console.log(bgColor.normal)\r\n\r\n    return (\r\n        <div className=\"card-container\">\r\n            <div className=\"card\">\r\n                <div className=\"front-card\" style = {{backgroundColor : color}}>\r\n                    <div className=\"img-container\">\r\n                        <img src={imgUrl} alt=\"\"/>\r\n                    </div>\r\n                    <h3 className=\"rank\">#{rank}</h3>\r\n                    <h3 className=\"name\">{name}</h3>\r\n                    <h3 className=\"type\" >{pokeType}</h3>\r\n                </div>\r\n                <div className=\"back-card\">\r\n                    <div className=\"stats\">\r\n                        {stats.map(item => (\r\n                            <ProgressBar width = {item.base_stat} statName= {item.stat.name}/>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport \"./Header.css\"\r\nimport Logo from \"../images/Pokemon_logo.png\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/International_Pok%C3%A9mon_logo.svg/500px-International_Pok%C3%A9mon_logo.svg.png\" alt=\"\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Card from './component/Card';\nimport Header from './component/Header'\n// import Pagination from './component/Pagination';\n\nlet pokeStartId = 1;\n\nconst App = () => {\n\n  const [data, setData] = useState([]);\n  let poke = [];\n  const [startId, setStartId] = useState(pokeStartId)\n  const [isLoading, setIsLoading] = useState(false)\n\n  const nextPage = () => {\n    if (pokeStartId <= 751) {\n      pokeStartId+=50\n      setStartId(pokeStartId);\n      setIsLoading(false)\n    } else{\n      setStartId(1)\n      setIsLoading(false)\n    }\n  }\n\n  const previousPage = () => {\n    if(pokeStartId >= 50){\n      pokeStartId-=50\n      setStartId(pokeStartId)\n      setIsLoading(false)\n    } else{\n      setStartId(751)\n      setIsLoading(false)\n    }\n  }\n\n  \n\n  useEffect(() => {\n\n    nextPage()\n    previousPage()\n\n    const getData = async() => {\n      for (let i = startId; i <= (startId+49); i++) {\n        let result = await axios(` https://pokeapi.co/api/v2/pokemon/${i}`)\n        poke.push(result.data)\n        \n      }\n      setData(poke)\n      setIsLoading(true)\n      console.log(poke)\n    }\n    getData()\n  }, [startId])\n\n\n\n  if (isLoading) {\n    return (<div className=\"container\">\n        <Header/>\n        {data.map(item => (\n          <Card key= {item.id}  name= {item.name} imgUrl={item.sprites.other[\"official-artwork\"].front_default} rank={item.id} stats={item.stats} pokeType={item.types[0].type.name}/>\n        ))}\n          <footer>\n              <button className=\"previous\" onClick = {previousPage}>Previous</button>\n              <button className=\"next\" onClick={nextPage}>Next</button>\n          </footer>\n      </div>\n    )} else{\n      return(\n        <div className=\"container\">\n          <Header/>\n          <div className=\"loadingContainer\">\n            <div className=\"loader\"></div>\n          </div>\n          <footer>\n              <button className=\"previous\" onClick = {previousPage}>Previous</button>\n              <button className=\"next\" onClick={nextPage}>Next</button>\n          </footer>\n        </div>\n      )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}